#!/bin/bash

# Development Environment Setup Script
# Sets up local development environment for the Telegram Marketplace

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🛠️  Development Environment Setup${NC}"
echo -e "${BLUE}=================================${NC}"

# Function to generate secure random string
generate_secret() {
    openssl rand -hex 32
}

# Function to prompt for input with default
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"

    if [ -n "$default" ]; then
        read -p "$prompt [$default]: " value
        value="${value:-$default}"
    else
        read -p "$prompt: " value
    fi

    eval "$var_name='$value'"
}

# Check if .dev.vars already exists
if [ -f ".dev.vars" ]; then
    echo -e "${YELLOW}⚠️  .dev.vars already exists${NC}"
    read -p "Do you want to overwrite it? (y/N): " overwrite
    if [[ ! $overwrite =~ ^[Yy]$ ]]; then
        echo "Keeping existing .dev.vars file"
        exit 0
    fi
fi

echo -e "\n${YELLOW}📝 Collecting development configuration...${NC}"

# Collect basic configuration
prompt_with_default "Telegram Bot Token (from @BotFather)" "" "TELEGRAM_BOT_TOKEN"
prompt_with_default "Your Telegram ID (for admin access)" "" "ADMIN_TELEGRAM_ID"
prompt_with_default "Frontend URL" "http://localhost:5173" "FRONTEND_URL"

# Generate development secrets
echo -e "\n${YELLOW}🔐 Generating development secrets...${NC}"
INIT_SECRET=$(generate_secret)
JWT_SECRET=$(generate_secret)
SESSION_ENCRYPTION_KEY=$(generate_secret)
TELEGRAM_WEBHOOK_SECRET=$(generate_secret)

echo -e "${GREEN}✅ Development secrets generated${NC}"

# Create .dev.vars file from template
echo -e "\n${YELLOW}📝 Creating .dev.vars file...${NC}"
echo "Template available: .dev.vars.example"

cat > .dev.vars << EOF
# =============================================================================
# DEVELOPMENT ENVIRONMENT VARIABLES
# Generated by setup-development.sh on $(date)
# =============================================================================

# Core Telegram Configuration
TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN
TELEGRAM_USE_TEST_API=true
TELEGRAM_WEBHOOK_SECRET=$TELEGRAM_WEBHOOK_SECRET

# Application Secrets
INIT_SECRET=$INIT_SECRET
JWT_SECRET=$JWT_SECRET
SESSION_ENCRYPTION_KEY=$SESSION_ENCRYPTION_KEY

# Development Configuration
NODE_ENV=development
FRONTEND_URL=$FRONTEND_URL
ADMIN_TELEGRAM_ID=$ADMIN_TELEGRAM_ID

# Development Features (Enabled)
DEV_MODE_ENABLED=true
MOCK_USERS_ENABLED=true
AUTH_BYPASS_ENABLED=true
DEBUG_MODE=true
VERBOSE_LOGGING=true

# Database Configuration (Local)
D1_DATABASE_NAME=marketplace-dev-db

# Storage Configuration (Local)
R2_BUCKET_NAME=marketplace-dev-images
KV_CACHE_NAMESPACE=marketplace-dev-cache
KV_SESSION_NAMESPACE=marketplace-dev-sessions

# Feature Configuration
PREMIUM_FEATURES_ENABLED=true
CONTENT_MODERATION_ENABLED=true
CACHE_ENABLED=true
RATE_LIMIT_ENABLED=false

# Pricing (Development - Lower costs)
BUMP_PRICE_STARS=1
FEATURED_PRICE_STARS=2
URGENT_PRICE_STARS=1

# Performance Settings
CACHE_DEFAULT_TTL=60
CACHE_SEARCH_TTL=30
CACHE_CATEGORY_TTL=300

# Security (Relaxed for development)
CORS_ORIGIN=*
SECURITY_HEADERS_ENABLED=false
RATE_LIMIT_ENABLED=false

# Testing Configuration
TEST_MODE=false
SKIP_TELEGRAM_VALIDATION=false

# Content Moderation (Lenient for development)
PROFANITY_FILTER_STRICT_MODE=false
AUTO_HIDE_FLAG_THRESHOLD=10
AUTO_BAN_FLAG_THRESHOLD=20

# File Upload
MAX_UPLOAD_SIZE=10485760
MAX_IMAGES_PER_LISTING=10

# Session Configuration
SESSION_TTL_HOURS=168
SESSION_REFRESH_THRESHOLD_HOURS=24

# Error Reporting (Disabled for development)
ERROR_REPORTING_ENABLED=false
ANALYTICS_ENABLED=false
PERFORMANCE_MONITORING_ENABLED=true
EOF

echo -e "${GREEN}✅ .dev.vars created successfully${NC}"

# Create local database setup
echo -e "\n${YELLOW}🗄️  Setting up local database...${NC}"

# Check if wrangler is installed
if command -v wrangler &> /dev/null; then
    # Create local D1 database
    if wrangler d1 create marketplace-dev-db --local 2>/dev/null; then
        echo -e "${GREEN}✅ Local D1 database created${NC}"
    else
        echo -e "${YELLOW}⚠️  Local database might already exist${NC}"
    fi

    # Apply migrations locally
    if [ -f "src/db/migrations/0003_marketplace_schema.sql" ]; then
        echo "Applying database migrations..."
        wrangler d1 execute marketplace-dev-db --local --file src/db/migrations/0003_marketplace_schema.sql 2>/dev/null || true
        echo -e "${GREEN}✅ Database migrations applied${NC}"
    fi
else
    echo -e "${YELLOW}⚠️  Wrangler not found, skipping database setup${NC}"
    echo "Install wrangler: npm install -g wrangler"
fi

# Install dependencies if package.json exists
if [ -f "package.json" ]; then
    echo -e "\n${YELLOW}📦 Installing dependencies...${NC}"
    npm install
    echo -e "${GREEN}✅ Dependencies installed${NC}"
fi

# Check for frontend dependencies
if [ -f "webapp/package.json" ]; then
    echo -e "\n${YELLOW}📦 Installing frontend dependencies...${NC}"
    cd webapp
    npm install
    cd ..
    echo -e "${GREEN}✅ Frontend dependencies installed${NC}"
fi

# Create development scripts
echo -e "\n${YELLOW}📝 Creating development scripts...${NC}"

# Create start script
cat > start-dev.sh << 'EOF'
#!/bin/bash

echo "🚀 Starting Telegram Marketplace Development Environment"

# Function to cleanup on exit
cleanup() {
    echo "🛑 Shutting down development environment..."
    jobs -p | xargs -r kill
    exit 0
}

trap cleanup SIGINT SIGTERM

# Start backend worker
echo "📡 Starting backend worker..."
wrangler dev --local --port 8787 &
WORKER_PID=$!

# Wait for worker to start
sleep 3

# Start frontend (if webapp directory exists)
if [ -d "webapp" ]; then
    echo "🖥️  Starting frontend..."
    cd webapp
    npm run dev &
    FRONTEND_PID=$!
    cd ..
fi

echo "✅ Development environment started!"
echo "📡 Backend: http://localhost:8787"
echo "🖥️  Frontend: http://localhost:5173"
echo "📋 Admin Panel: http://localhost:5173/#/admin"
echo "🔧 Mock Auth: http://localhost:5173/#/dev"
echo ""
echo "Press Ctrl+C to stop all services"

# Wait for processes
wait
EOF

chmod +x start-dev.sh

echo -e "${GREEN}✅ Development scripts created${NC}"

# Create .gitignore entries
echo -e "\n${YELLOW}📝 Updating .gitignore...${NC}"

if [ -f ".gitignore" ]; then
    # Add development-specific entries if not already present
    if ! grep -q ".dev.vars" .gitignore; then
        echo "" >> .gitignore
        echo "# Development environment" >> .gitignore
        echo ".dev.vars" >> .gitignore
        echo ".wrangler/" >> .gitignore
        echo "*.local.db" >> .gitignore
    fi
else
    cat > .gitignore << EOF
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.dev.vars
.env.local
.env.production

# Development
.wrangler/
*.local.db
.DS_Store

# Build outputs
dist/
build/
*.tgz

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity
EOF
fi

echo -e "${GREEN}✅ .gitignore updated${NC}"

# Create development documentation
cat > DEVELOPMENT.md << EOF
# Development Setup

This document contains information for local development of the Telegram Marketplace.

## Quick Start

1. Copy environment template:
   \`\`\`bash
   cp .dev.vars.example .dev.vars
   \`\`\`

2. Run the development setup:
   \`\`\`bash
   ./scripts/setup-development.sh
   \`\`\`

3. Start the development environment:
   \`\`\`bash
   ./start-dev.sh
   \`\`\`

4. Access the application:
   - Backend API: http://localhost:8787
   - Frontend: http://localhost:5173
   - Admin Panel: http://localhost:5173/#/admin

## Environment Variables

All environment variables are managed through \`.dev.vars\` (Wrangler format):
- Copy from \`.dev.vars.example\`
- Auto-generated secrets via setup script
- Single source of truth for all configuration
- No multiple environment file formats

## Development Features

### Mock Authentication
- Mock users are enabled in development
- Access dev auth at: http://localhost:5173/#/dev
- Pre-configured test users available

### Debug Mode
- Verbose logging enabled
- SQL query logging available
- Error details exposed for debugging

### Hot Reload
- Backend: Automatic reload on file changes
- Frontend: Hot module replacement

## Testing

### Run Tests
\`\`\`bash
# All tests
npm test

# Unit tests only
npm run test:unit

# Performance tests
npm run test:perf

# Load testing
cd tests/load-testing
./run-tests.sh --test-type smoke
\`\`\`

### Mock Data
- Mock users automatically created
- Sample categories pre-loaded
- Test listings can be created via API

## Database

### Local Database
- SQLite database in .wrangler/state/
- Migrations applied automatically
- Reset: \`wrangler d1 execute marketplace-dev-db --local --command "DROP TABLE users;"\`

### Migrations
\`\`\`bash
# Apply migrations
node scripts/migrate.js up

# Check status
node scripts/migrate.js status

# Rollback
node scripts/migrate.js down
\`\`\`

## Troubleshooting

### Common Issues

1. **Port already in use**: Change ports in start-dev.sh
2. **Database locked**: Stop all wrangler processes
3. **Telegram API errors**: Check bot token and test API setting
4. **CORS issues**: Verify FRONTEND_URL in .dev.vars

### Reset Development Environment
\`\`\`bash
# Reset database
rm -rf .wrangler/state/
wrangler d1 execute marketplace-dev-db --local --file src/db/migrations/0003_marketplace_schema.sql

# Reset dependencies
rm -rf node_modules/ webapp/node_modules/
npm install
cd webapp && npm install
\`\`\`

## Production Differences

Development environment differs from production:
- Test Telegram API used
- Authentication bypass available
- Relaxed security settings
- Local database and storage
- Detailed error messages
- Debug logging enabled
EOF

echo -e "${GREEN}✅ Development documentation created${NC}"

# Final summary
echo -e "\n${GREEN}🎉 Development environment setup completed!${NC}"
echo ""
echo -e "${BLUE}📋 Summary:${NC}"
echo "• Configuration file: .dev.vars"
echo "• Start script: ./start-dev.sh"
echo "• Documentation: DEVELOPMENT.md"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Start development environment: ./start-dev.sh"
echo "2. Open frontend: http://localhost:5173"
echo "3. Test with mock users: http://localhost:5173/#/dev"
echo "4. Check admin panel: http://localhost:5173/#/admin"
echo ""
echo -e "${BLUE}Useful development commands:${NC}"
echo "• Start dev: ./start-dev.sh"
echo "• Run tests: npm test"
echo "• Check logs: wrangler tail --local"
echo "• Database: wrangler d1 execute marketplace-dev-db --local --command 'SELECT * FROM users;'"
echo ""
echo -e "${GREEN}Happy coding! 🚀${NC}"
EOF